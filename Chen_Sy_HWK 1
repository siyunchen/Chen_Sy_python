# -*- coding: utf-8 -*-
"""
Created on Thu Sep  8 19:35:52 2016

@author: SiyunChen
"""
#Your grade is influenced by your format, please refer to the format that Professor G has shown during the lecture. The content
#we expect is the question you are trying to solve, the input variables you use and the output you expect. Once you corrected
#them, I am more than happy to give your mark back!
#Overall Comment: Very good practise! You have carefully considered each possible situations. And the logic is clear and efficient.
'''
# -*- coding: utf-8 -*-
"""
Created on Thu Sep  8 19:35:52 2016

@author: SiyunChen
"""

# Q1 
def print_max(a,b):
  '''
  Define a function max()that takes two numbers as arguments and returns 
  the largest of them.
  Parameters:
  a,b: two numbers we input
  Returns:
  the larger number of the two numbers we input
  '''   
  if a > b: 
    print(a, 'is the maximum') #If a > b, a is the maximum of two numbers
  elif a == b:
    print(a,'is equal to', b) #If a quals to b, a = b
  else:
    print(b, 'is the maximum') #If a < b, b is the maximum of two numbers

print_max(4, 10) #call the function
print_max(5,5) #call the function again

# Q2
def max_of_three(a, b, c):
  '''
  Define a function max_of_three()that takes three numbers as arguments 
  and returns the largest of them.  
  Parameters:
  a,b,c: three numbers we input
  Returns:
  the larger number of the three numbers we input
  '''
  if a >= b:
     if a >= c:
      print(a, 'is the maximum of three') #If a > = b and a > c, a is the maximum of three numbers
     else:
      print(c, 'is the maximum of three')  #If a > = b and a < c, c is the maximum of three numbers  
  else:
    if b >= c:
      print(b, 'is the maximum of three') #If a < b and b > = c, b is the maximum of three numbers
    else:
      print(c, 'is the maximum of three') #If a < b and b < c, c is the maximum of three numbers
      
max_of_three(6, 1, 2) #call the function
max_of_three(9, 16 ,5) #call the function again

# Q3 
def length(inputString):
    '''
    Define a function that computes the length of a given list or string.
    Parameters:
    inputString: a list or a string we input
    Returns:
    a number of the length of the list or the string we input
    '''
    count = 0 #Initializing the length to be equal to zero
    for i in inputString: #for loop to repeat n number of times
        count = count + 1
    return count

print ('The length of the string is', length('Hello World')) #call the function
print ('The length of the string is', length('ThisisFun')) #call the function
print(length("")) #call the function

# Q4
def is_a_vowel(inputString):
   '''
   Write a function that takes a character (i.e. a string of length 1) 
   and returns True if it is a vowel, False otherwise. 
   Parameters:
   inputString: an alphabet character we input
   Returns:
   True if the alphabet character we input is a vowel, False otherwise
   '''
   vowels = ('a', 'e', 'i', 'o', 'u','A','E','I', 'O', 'U')
   #List all the vowels.
   if inputString in vowels:
     print ('True') #True if the character is in the vowels list
   else:
     print('False') #False if the character is not in the vowels list

is_a_vowel('a') #call the function
is_a_vowel('b') #call the function
is_a_vowel('A') #call the function

# Q5 
vowels = ('a', 'e', 'i', 'o', 'u','A','E','I', 'O', 'U', ' ')
# List all the vowels.
def translate(inputString):
   '''
   Write a function translate()that will translate a text into 
   "rövarspråket" (Swedish for "robber's language").That is, double every consonant and place
   an occurrence of "o"in between. For example, translate("this is fun") should return the string "tothohisosisosfofunon".
   Parameters:
   inputString: a string of English words we input
   Returns:
   the "robber's language" translation for the string of English words we input
   '''
   new = '' # Initializing the new text to null
   for c in inputString: #for loop to repeat n number of times
    if c in vowels: 
     new = new + c # If the character in input strings is in vowels list, 
                  # adds character in inputString to the new text
                  # and assign the result to new text
   else:
    new = new + c + 'o' + c 
   return new #If the character in input strings is not in vowels list, adds character in inputString to the new text, 
              #adds o between the character in inputString, and adds character in inputString to the new text to new text,
              #and assign the result to new text

print('The translatd string is', translate('this is fun')) #call the function 
print('The translatd string is', translate('This was good')) #call the function

# Q6 
def sum(inputNumbers):
   '''
   Define a function sum() that sums all the numbers in a list of numbers.
   Parameters:
   inputNumbers: a list of numbers we input
   Returns:
   the sum of all the numbers in the list we input
   '''
   total = 0 # Initializing the sum of numbers to be equal to zero
   for number in inputNumbers: # for loop to repeat n number of times
       total = total + number # Add number in the inputString to the total and assign the result to total
   return total
 
def multiply(inputNumbers):
    '''
    Define a function multiply()that multiplies (respectively) all the numbers in a list of numbers.
    Parameters:
    inputNumbers: a list of numbers we input
    Returns:
    the multiplication of all the numbers in the list we input
    '''
    total = 1 #Initializing the multiplication of numbers to be equal to one
    for number in inputNumbers: #for loop to repeat n number of times
        total = total * number #Multiply number in the inputString to the total and assign the result to total
    return total
 
print('The sum of the numbers is', sum([3, 4, 5, 6])) #call the function
print('The multiplication of the numbers is', multiply([3, 4, 5, 6])) #call the function
print('The sum of the numbers is', sum([-13, 1, 2, 4])) #call the function
print('The multiplication of the numbers is', multiply([-13, 1, 2, 4])) #call the function

# Q7 
def reverse(inputString):
    '''
    Define a function reverse()that computes the reversal of a string.
    Parameters:
    inputString: a string of English words we input
    Returns:
    the revercal of the string of English words we input
    '''
    result = [] #Initializing the result to null
    for word in inputString.split()[::-1]: 
    #for loop to repeat n number of times
    #Split each character in inputString from the last one to the first one
        result.append(word[::-1])
    return " ".join(result) #Combine each character in the inputString from the last character to the first one

print(reverse('This was good ')) #call the function
print(reverse('This is fun')) #call the function again

# Q8 
def is_it_palindrome(inputString):
    '''
    Define a function is_palindrome()that recognizes palindromes (i.e. words that look the same written backwards).
    Parameters:
    inputString: a string we input
    Returns:
    True if the string we input is palindromes(i.e. words that look the same written backwards), False if the string is not palindromes
    '''
    inputString = inputString.upper() #Take care of mixed case by uper casing the word
    inputString = inputString.replace(" ", "") #Take care of spaces
    return inputString == inputString[::-1] 
    #True if the inputString that looks the same written backwards
    #False if the inputString that looks different written backwards
                                 
print(is_it_palindrome('Radar')) #call the function
print(is_it_palindrome('R adar2')) #call the function
print(is_it_palindrome('R adar')) #call the function again

# Q9 
def is_member(x, a):
    '''
    Write a function is_member()that takes a value (i.e. a number, string, etc) x and a list of values a, and returns True 
    if x is a member of a, False otherwise). 
    Parameters:
    x: a value (i.e. a number, string, etc) we input
    a: a list of values we input
    Returns:
    Ture if x (the value we input) is a member of a (the list of values we input), False if x is not a member of a 
    '''
    if len(a) == 0:
        return False #False if there is no element in list a
    return x == a[0] or is_member(x, a[1:]) #True if there is at least one the same element of x and a

print(is_member(1,[1,2,3,4,5])) #call the function
print(is_member('b', [1, 2, 'a'])) #call the function
print(is_member('abcd', ['abcd', 'dfwe', 'rtw'])) #call the function

# Q10 
def overlapping(list1, list2):
    '''
    Define a function overlapping()that takes two lists and returns True if they have at least one member in common, False otherwise.
    Parameters:
    list1, list2: two lists we input
    Returns:
    True if two lists have at least one member in common, False otherwise
    '''
    for element1 in list1: #for loop to repeat n number of times
        for element2 in list2: #for loop to repeat n number of times
            if element1 == element2:
                return True #True if two lists have at least one member in common
    return False #False if two lists have no member in common

print(overlapping([1, 2, 3], [2, 3, 4])) #call the function
print(overlapping([1, 'apple', 3], ['apple', 'boy', 'cat'])) #call the function again

# Q11 
def generate_n_chars(n, c):
    '''
    Define a function generate_n_chars()that takes an integer n and a character c and returns a string, n characters long, 
    consisting only of c:s.
    Parameters:
    n: an integer we input
    c: a character we input
    Returns:
    a string of n (the integer we input) characters long that consisting only of c:s (the character we input)
    '''
    outputString = '' #Initializing the outputString to null
    for i in range(n): #for loop to repeat n number of times
        outputString = outputString + c #Add number character c to outputString and assign the result to outputString
    return outputString

print ('The generated string is', generate_n_chars(2, 'c')) #call the function
print ('The generated string is', generate_n_chars(5, 's')) #call the function
print ('The generated string is', generate_n_chars(8, '*')) #call the function

# Q12
def histogram(IntegerList):
    '''
    Define a procedure histogram()that takes a list of integers and prints a histogram to the screen.
    Parameters:
    IntegerList: a list of integers we input
    Returns:
    prints a histogram to the screen of the list of integers we input
    '''
    for n in IntegerList: #for loop to repeat n number of times
     print(generate_n_chars(n, '*')) #Using generate_n_chars from Q13
   
histogram([1, 2, 3]) #call the function
histogram([6, 5, 4, 3, 7]) #call the function
histogram([6, 1, 8, 9, 10, 2]) #call the function

# Q13 
def max_in_list(inputList):
    '''
    Write a function max_in_list()that takes a list of numbers and returns the largest one. 
    Parameters: 
    inputList: a list of numbers we input
    Returns:
    the largest one of the list of numbers we input
    '''
    max = inputList[0] #Initializing inputList
    for m in inputList: #for loop to repeat n number of times
        if m > max:
            max = m #If m in inputList > the max of the list, assign m to max
    return max

print('The largest one is', max_in_list([1, 2, 3, 4])) #call the function
print('The largest one is', max_in_list([5, 1, 39, -1, 19])) #call the function again

# Q14 
def map_list_to_integers(inputWords):
    '''
    Write a program that maps a list of words into a list of integers representing the lengths of the correponding words.
    Parameters:
    inputWords: a list of words we input
    Returns:
    a list of integers representing the lengths of the correponding words we input
    '''
    lengths = [] #Initializing the lengths 
    for word in inputWords: #for loop to repeat n number of times
     lengths.append(len(word)) #Add length of word in inputWords to length
    return lengths 

inputWords = ['Happy', 'Everyday', 'Friends']
print ('The list of integers is',map_list_to_integers(inputWords)) #call the function

inputWords = ['Good', 'Evening', 'Classmates']
print ('The list of integers is', map_list_to_integers(inputWords)) #call the function

# Q15 
def map_list_to_integers(inputWords): #use function from Q14
    '''
    Write a function find_longest_word()that takes a list of words and returns the length of the longest one.
    Parameters:
    inputWords: a list of words we input
    Returns:
    a list of integers representing the lengths of the correponding words we input
    '''
    lengths = []
    for word in inputWords: #for loop to repeat n number of times
     lengths.append(len(word))
    return lengths
    
def find_longest_word(inputWords):
    '''
    Write a function find_longest_word()that takes a list of words and returns the length of the longest one.
    Parameters:
    inputWords: a list of words we input
    Returns:
    the length of the longest word in the list we input
    '''
    return max(map_list_to_integers(inputWords))
    
print('The length of the longest word is', 
      find_longest_word(['Happy', 'Everyday', 'Friends'])) #call the function

print('The length of the longest word is', 
      find_longest_word(['Good', 'Evening', 'Classmates'])) #call the function
           
# Q16 
def filter_long_words(inputWordsList, n):
    '''
    Write a function filter_long_words()that takes a list of words and an integer n and returns the list of words that are longer than n.
    Parameters:
    inputWordsList: a list of words we input
    n: an integer we input
    Returns:
    the list of words that are longer than n (the integer we input)
    '''
    return [word for word in inputWordsList if len(word) > n]

print('The list of words is', 
      filter_long_words(['zoo', 'cats','zebra','ok'],3)) #call the function
      
print('The list of words is', 
      filter_long_words(['a', 'wonderful','place','to', 'visit'],4)) #call the function

    
